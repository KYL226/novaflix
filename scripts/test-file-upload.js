// scripts/test-file-upload.js
// Script pour tester le syst√®me d'upload de fichiers admin

console.log('üß™ Test du syst√®me d\'upload de fichiers admin');
console.log('==============================================');

// Test 1: V√©rifier que l'API d'upload existe
console.log('\n1. Test de l\'API d\'upload...');
fetch('/api/admin/upload', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer invalid-token'
  }
})
.then(response => {
  if (response.status === 401) {
    console.log('‚úÖ API d\'upload prot√©g√©e - retourne 401 pour token invalide');
  } else {
    console.log('‚ùå API d\'upload non prot√©g√©e - statut:', response.status);
  }
})
.catch(error => {
  console.log('‚ùå Erreur lors du test de l\'API:', error.message);
});

// Test 2: V√©rifier que les composants d'upload sont pr√©sents
console.log('\n2. Test des composants d\'upload...');
const uploadComponents = document.querySelectorAll('[data-testid="file-upload"]');
if (uploadComponents.length > 0) {
  console.log('‚úÖ Composants d\'upload trouv√©s:', uploadComponents.length);
} else {
  console.log('‚ö†Ô∏è Composants d\'upload non trouv√©s (normal si pas sur la page d\'ajout)');
}

// Test 3: V√©rifier les zones de drag & drop
console.log('\n3. Test des zones de drag & drop...');
const dropZones = document.querySelectorAll('[class*="border-dashed"]');
if (dropZones.length > 0) {
  console.log('‚úÖ Zones de drag & drop trouv√©es:', dropZones.length);
} else {
  console.log('‚ö†Ô∏è Zones de drag & drop non trouv√©es (normal si pas sur la page d\'ajout)');
}

// Test 4: V√©rifier les boutons de s√©lection de fichiers
console.log('\n4. Test des boutons de s√©lection...');
const fileButtons = document.querySelectorAll('button[type="button"]');
const uploadButtons = Array.from(fileButtons).filter(btn => 
  btn.textContent.includes('S√©lectionner') || btn.textContent.includes('Upload')
);
if (uploadButtons.length > 0) {
  console.log('‚úÖ Boutons d\'upload trouv√©s:', uploadButtons.length);
} else {
  console.log('‚ö†Ô∏è Boutons d\'upload non trouv√©s (normal si pas sur la page d\'ajout)');
}

// Test 5: V√©rifier les messages d'erreur d'upload
console.log('\n5. Test des messages d\'erreur...');
const errorAlerts = document.querySelectorAll('[class*="destructive"]');
if (errorAlerts.length > 0) {
  console.log('‚úÖ Messages d\'erreur trouv√©s:', errorAlerts.length);
} else {
  console.log('‚ÑπÔ∏è Aucun message d\'erreur affich√© (normal)');
}

// Test 6: V√©rifier les aper√ßus d'images
console.log('\n6. Test des aper√ßus d\'images...');
const imagePreviews = document.querySelectorAll('img[alt="Aper√ßu"]');
if (imagePreviews.length > 0) {
  console.log('‚úÖ Aper√ßus d\'images trouv√©s:', imagePreviews.length);
} else {
  console.log('‚ÑπÔ∏è Aucun aper√ßu d\'image affich√© (normal si pas d\'image upload√©e)');
}

// Test 7: V√©rifier les barres de progression
console.log('\n7. Test des barres de progression...');
const progressBars = document.querySelectorAll('[class*="bg-blue-600"]');
if (progressBars.length > 0) {
  console.log('‚úÖ Barres de progression trouv√©es:', progressBars.length);
} else {
  console.log('‚ÑπÔ∏è Aucune barre de progression affich√©e (normal si pas d\'upload en cours)');
}

// Test 8: V√©rifier les ic√¥nes de statut
console.log('\n8. Test des ic√¥nes de statut...');
const statusIcons = document.querySelectorAll('[class*="text-green-500"], [class*="text-red-500"]');
if (statusIcons.length > 0) {
  console.log('‚úÖ Ic√¥nes de statut trouv√©es:', statusIcons.length);
} else {
  console.log('‚ÑπÔ∏è Aucune ic√¥ne de statut affich√©e (normal si pas d\'upload)');
}

// Test 9: V√©rifier les validations de formulaire
console.log('\n9. Test des validations de formulaire...');
const requiredFields = document.querySelectorAll('input[required], textarea[required]');
if (requiredFields.length > 0) {
  console.log('‚úÖ Champs obligatoires trouv√©s:', requiredFields.length);
} else {
  console.log('‚ö†Ô∏è Aucun champ obligatoire trouv√©');
}

// Test 10: V√©rifier les types de fichiers accept√©s
console.log('\n10. Test des types de fichiers accept√©s...');
const fileInputs = document.querySelectorAll('input[type="file"]');
if (fileInputs.length > 0) {
  fileInputs.forEach((input, index) => {
    const accept = input.getAttribute('accept');
    console.log(`‚úÖ Input ${index + 1} - Types accept√©s:`, accept || 'Tous');
  });
} else {
  console.log('‚ö†Ô∏è Aucun input de fichier trouv√©');
}

console.log('\nüéØ R√©sum√© des tests:');
console.log('- API d\'upload: Prot√©g√©e par authentification');
console.log('- Composants: Pr√™ts pour l\'upload de fichiers');
console.log('- Interface: Zones de drag & drop et boutons de s√©lection');
console.log('- Validation: Champs obligatoires et types de fichiers');
console.log('- Feedback: Messages d\'erreur et aper√ßus d\'images');
console.log('- Progression: Barres de progression et ic√¥nes de statut');

console.log('\nüìã Instructions pour tester manuellement:');
console.log('1. Aller sur /admin/movies/add');
console.log('2. Remplir les informations de base');
console.log('3. Cliquer sur "S√©lectionner un fichier" pour la vid√©o');
console.log('4. Choisir un fichier vid√©o (MP4, AVI, MOV, etc.)');
console.log('5. Cliquer sur "S√©lectionner un fichier" pour l\'image');
console.log('6. Choisir une image (JPG, PNG, WebP)');
console.log('7. V√©rifier que les fichiers sont upload√©s automatiquement');
console.log('8. Soumettre le formulaire');

console.log('\n‚úÖ Test du syst√®me d\'upload termin√©!');
