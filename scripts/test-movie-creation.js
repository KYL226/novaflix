const fetch = require('node-fetch');

async function testMovieCreation() {
  try {
    console.log('üß™ Test de cr√©ation de film via l\'API...');
    
    // Donn√©es de test
    const testMovie = {
      title: 'Film de Test API',
      description: 'Ceci est un film de test pour v√©rifier que l\'API fonctionne correctement',
      genre: ['Test', 'Action'],
      duration: 120,
      releaseYear: 2024,
      type: 'film',
      videoUrl: 'test/test.mp4',
      posterUrl: 'test/test.jpg',
      published: true
    };
    
    console.log('üì§ Donn√©es √† envoyer:', JSON.stringify(testMovie, null, 2));
    
    // Test sans authentification (devrait √©chouer avec 403)
    console.log('\n1Ô∏è‚É£ Test sans authentification...');
    try {
      const res1 = await fetch('http://localhost:3000/api/admin/movies', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(testMovie)
      });
      
      const data1 = await res1.json();
      console.log(`   Status: ${res1.status}`);
      console.log(`   R√©ponse: ${JSON.stringify(data1, null, 2)}`);
    } catch (error) {
      console.log(`   ‚ùå Erreur: ${error.message}`);
    }
    
    // Test avec donn√©es invalides (devrait √©chouer avec 400)
    console.log('\n2Ô∏è‚É£ Test avec donn√©es invalides...');
    const invalidMovie = { ...testMovie, title: '' }; // Titre vide
    
    try {
      const res2 = await fetch('http://localhost:3000/api/admin/movies', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(invalidMovie)
      });
      
      const data2 = await res2.json();
      console.log(`   Status: ${res2.status}`);
      console.log(`   R√©ponse: ${JSON.stringify(data2, null, 2)}`);
    } catch (error) {
      console.log(`   ‚ùå Erreur: ${error.message}`);
    }
    
    // Test avec type invalide (devrait √©chouer avec 400)
    console.log('\n3Ô∏è‚É£ Test avec type invalide...');
    const invalidTypeMovie = { ...testMovie, type: 'invalid_type' };
    
    try {
      const res3 = await fetch('http://localhost:3000/api/admin/movies', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(invalidTypeMovie)
      });
      
      const data3 = await res3.json();
      console.log(`   Status: ${res3.status}`);
      console.log(`   R√©ponse: ${JSON.stringify(data3, null, 2)}`);
    } catch (error) {
      console.log(`   ‚ùå Erreur: ${error.message}`);
    }
    
    console.log('\nüéâ Test termin√© !');
    console.log('\nüí° Pour tester avec authentification, vous devez :');
    console.log('   1. Vous connecter en tant qu\'admin');
    console.log('   2. R√©cup√©rer le token depuis localStorage');
    console.log('   3. L\'utiliser dans l\'en-t√™te Authorization');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// V√©rifier que le serveur est en cours d'ex√©cution
console.log('‚ö†Ô∏è  Assurez-vous que votre serveur Next.js est en cours d\'ex√©cution sur http://localhost:3000');
console.log('‚ö†Ô∏è  Installez node-fetch si n√©cessaire: npm install node-fetch');

// Ex√©cuter le script
testMovieCreation().catch(console.error);
