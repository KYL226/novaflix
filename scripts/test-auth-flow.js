#!/usr/bin/env node

/**
 * Script de test pour v√©rifier le flux d'authentification complet
 * Teste l'inscription, la connexion et l'affichage des donn√©es utilisateur
 */

const http = require('http');

const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

// Couleurs pour l'affichage
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || 80,
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: options.headers || {}
    };

    const req = http.request(requestOptions, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        resolve({
          status: res.statusCode,
          headers: res.headers,
          data: data
        });
      });
    });

    req.on('error', reject);
    
    if (options.body) {
      req.write(options.body);
    }
    
    req.end();
  });
}

async function testRegistration() {
  log('\nüìù Test d\'inscription', 'blue');
  
  try {
    const testUser = {
      name: 'Test User',
      email: `test-${Date.now()}@example.com`,
      password: 'password123'
    };

    const response = await makeRequest(`${BASE_URL}/api/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testUser)
    });

    if (response.status === 201) {
      const data = JSON.parse(response.data);
      
      if (data.user && data.token) {
        log('‚úÖ Inscription r√©ussie avec token', 'green');
        log(`   Nom: ${data.user.name}`, 'green');
        log(`   Email: ${data.user.email}`, 'green');
        log(`   R√¥le: ${data.user.role}`, 'green');
        log(`   Abonnement: ${data.user.subscription}`, 'green');
        log(`   Token g√©n√©r√©: ${data.token ? 'Oui' : 'Non'}`, 'green');
        
        return { user: data.user, token: data.token };
      } else {
        log('‚ùå Donn√©es utilisateur manquantes dans la r√©ponse', 'red');
        return null;
      }
    } else {
      log(`‚ùå Erreur d'inscription: ${response.status}`, 'red');
      log(`   R√©ponse: ${response.data}`, 'red');
      return null;
    }
  } catch (error) {
    log(`‚ùå Erreur lors du test d'inscription: ${error.message}`, 'red');
    return null;
  }
}

async function testLogin(email, password) {
  log('\nüîê Test de connexion', 'blue');
  
  try {
    const response = await makeRequest(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ email, password })
    });

    if (response.status === 200) {
      const data = JSON.parse(response.data);
      
      if (data.user && data.token) {
        log('‚úÖ Connexion r√©ussie', 'green');
        log(`   Nom: ${data.user.name}`, 'green');
        log(`   Email: ${data.user.email}`, 'green');
        log(`   R√¥le: ${data.user.role}`, 'green');
        log(`   Abonnement: ${data.user.subscription}`, 'green');
        
        return { user: data.user, token: data.token };
      } else {
        log('‚ùå Donn√©es utilisateur manquantes dans la r√©ponse', 'red');
        return null;
      }
    } else {
      log(`‚ùå Erreur de connexion: ${response.status}`, 'red');
      log(`   R√©ponse: ${response.data}`, 'red');
      return null;
    }
  } catch (error) {
    log(`‚ùå Erreur lors du test de connexion: ${error.message}`, 'red');
    return null;
  }
}

async function testUserDataDisplay() {
  log('\nüë§ Test d\'affichage des donn√©es utilisateur', 'blue');
  
  log('Instructions pour tester manuellement:', 'yellow');
  log('1. Ouvrez votre navigateur sur http://localhost:3000', 'yellow');
  log('2. Inscrivez-vous avec un nouveau compte', 'yellow');
  log('3. V√©rifiez que vous √™tes automatiquement connect√©', 'yellow');
  log('4. V√©rifiez que votre nom s\'affiche correctement dans le header', 'yellow');
  log('5. Allez sur la page de profil et v√©rifiez les informations', 'yellow');
  log('6. D√©connectez-vous et reconnectez-vous', 'yellow');
  log('7. V√©rifiez que les donn√©es persistent', 'yellow');
}

async function runAuthTests() {
  log('üîê Tests du flux d\'authentification', 'bold');
  log('=' .repeat(60), 'blue');
  
  // Test d'inscription
  const registrationResult = await testRegistration();
  
  if (registrationResult) {
    // Test de connexion avec le compte cr√©√©
    await testLogin(registrationResult.user.email, 'password123');
  }
  
  // Instructions pour les tests manuels
  await testUserDataDisplay();
  
  log('\n' + '=' .repeat(60), 'blue');
  log('üéØ R√©sum√© des tests d\'authentification', 'bold');
  
  if (registrationResult) {
    log('‚úÖ Inscription avec connexion automatique', 'green');
    log('‚úÖ Token g√©n√©r√© correctement', 'green');
    log('‚úÖ Donn√©es utilisateur compl√®tes', 'green');
  } else {
    log('‚ùå Probl√®mes d√©tect√©s dans le flux d\'inscription', 'red');
  }
  
  log('\nüìã Points √† v√©rifier manuellement:', 'blue');
  log('‚Ä¢ L\'inscription connecte automatiquement l\'utilisateur', 'yellow');
  log('‚Ä¢ Le nom utilisateur s\'affiche correctement (pas "inconnu")', 'yellow');
  log('‚Ä¢ Aucune erreur 401 dans la console', 'yellow');
  log('‚Ä¢ Les donn√©es persistent apr√®s rechargement', 'yellow');
}

// Ex√©cuter les tests
if (require.main === module) {
  runAuthTests().catch(console.error);
}

module.exports = {
  testRegistration,
  testLogin,
  testUserDataDisplay,
  runAuthTests
};
