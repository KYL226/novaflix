const { MongoClient } = require('mongodb');
require('dotenv').config({ path: '.env.local' });

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/novaflix';

async function testMovieAPI() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    console.log('‚úÖ Connect√© √† MongoDB');
    
    const db = client.db('novaflix');
    const moviesCollection = db.collection('movies');
    
    console.log('\nüîç Test de l\'API de cr√©ation de films...');
    
    // Test 1: V√©rifier la collection movies
    console.log('\n1Ô∏è‚É£ V√©rification de la collection movies :');
    const movieCount = await moviesCollection.countDocuments();
    console.log(`   - Nombre total de films : ${movieCount}`);
    
    // Test 2: V√©rifier la structure des films existants
    console.log('\n2Ô∏è‚É£ V√©rification de la structure des films :');
    const sampleMovie = await moviesCollection.findOne();
    if (sampleMovie) {
      const requiredFields = ['title', 'description', 'genre', 'duration', 'releaseYear', 'type', 'videoUrl', 'posterUrl'];
      const missingFields = requiredFields.filter(field => !(field in sampleMovie));
      
      if (missingFields.length > 0) {
        console.log(`   ‚ö†Ô∏è  Champs manquants : ${missingFields.join(', ')}`);
      } else {
        console.log('   ‚úÖ Tous les champs requis sont pr√©sents');
      }
      
      console.log('   - Champs pr√©sents :', Object.keys(sampleMovie));
    } else {
      console.log('   ‚ÑπÔ∏è  Aucun film trouv√© dans la base');
    }
    
    // Test 3: V√©rifier les index
    console.log('\n3Ô∏è‚É£ V√©rification des index :');
    const indexes = await moviesCollection.indexes();
    const hasTitleIndex = indexes.some(index => index.key.title === 1);
    const hasTypeIndex = indexes.some(index => index.key.type === 1);
    const hasGenreIndex = indexes.some(index => index.key.genre === 1);
    
    if (hasTitleIndex) console.log('   ‚úÖ Index sur title pr√©sent');
    else console.log('   ‚ùå Index sur title manquant');
    
    if (hasTypeIndex) console.log('   ‚úÖ Index sur type pr√©sent');
    else console.log('   ‚ùå Index sur type manquant');
    
    if (hasGenreIndex) console.log('   ‚úÖ Index sur genre pr√©sent');
    else console.log('   ‚ùå Index sur genre manquant');
    
    // Test 4: Cr√©er un film de test
    console.log('\n4Ô∏è‚É£ Test de cr√©ation d\'un film :');
    const testMovie = {
      title: 'Film de Test',
      description: 'Ceci est un film de test pour v√©rifier l\'API',
      genre: ['Test', 'Drame'],
      duration: 120,
      releaseYear: 2024,
      type: 'film',
      videoUrl: 'test/test.mp4',
      posterUrl: 'test/test.jpg',
      published: true,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    try {
      const result = await moviesCollection.insertOne(testMovie);
      console.log(`   ‚úÖ Film de test cr√©√© avec l'ID : ${result.insertedId}`);
      
      // Supprimer le film de test
      await moviesCollection.deleteOne({ _id: result.insertedId });
      console.log('   ‚úÖ Film de test supprim√©');
    } catch (error) {
      console.log(`   ‚ùå Erreur lors de la cr√©ation du film de test : ${error.message}`);
    }
    
    // Test 5: V√©rifier les types de films
    console.log('\n5Ô∏è‚É£ Types de films disponibles :');
    const types = await moviesCollection.distinct('type');
    console.log(`   - Types trouv√©s : ${types.join(', ')}`);
    
    // Test 6: V√©rifier les genres
    console.log('\n6Ô∏è‚É£ Genres disponibles :');
    const genres = await moviesCollection.distinct('genre');
    const uniqueGenres = [...new Set(genres.flat())];
    console.log(`   - Genres uniques : ${uniqueGenres.join(', ')}`);
    
    console.log('\nüéâ Test de l\'API termin√© !');
    
    // Recommandations
    if (movieCount === 0) {
      console.log('\nüí° RECOMMANDATIONS :');
      console.log('   1. Ajoutez des films via l\'interface admin');
      console.log('   2. Ou utilisez le script init-db.js pour ajouter des films d\'exemple');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test :', error);
  } finally {
    await client.close();
    console.log('\nüîå Connexion MongoDB ferm√©e');
  }
}

// Ex√©cuter le script
testMovieAPI().catch(console.error);
