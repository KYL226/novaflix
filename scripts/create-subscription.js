const { MongoClient } = require('mongodb');
require('dotenv').config({ path: '.env.local' });

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/novaflix';

async function createSubscription() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    console.log('‚úÖ Connect√© √† MongoDB');
    
    const db = client.db('novaflix');
    const subscriptionsCollection = db.collection('subscriptions');
    
    // V√©rifier si l'utilisateur existe
    const usersCollection = db.collection('users');
    const user = await usersCollection.findOne({ email: 'test2@gmail.com' });
    
    if (!user) {
      console.log('‚ùå Utilisateur test2@gmail.com non trouv√©');
      return;
    }
    
    console.log('üë§ Utilisateur trouv√©:', user.email, '(ID:', user._id, ')');
    
    // V√©rifier si une subscription existe d√©j√†
    const existingSubscription = await subscriptionsCollection.findOne({ userId: user._id.toString() });
    
    if (existingSubscription) {
      console.log('‚ö†Ô∏è  Une subscription existe d√©j√† pour cet utilisateur');
      console.log('   Type:', existingSubscription.type);
      console.log('   Status:', existingSubscription.status);
      console.log('   Expire le:', existingSubscription.endDate);
      return;
    }
    
    // Cr√©er la nouvelle subscription
    const subscription = {
      userId: user._id.toString(),
      type: 'premium',
      startDate: new Date(),
      endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // +1 an
      status: 'active',
      paymentMethod: 'credit_card',
      price: 19.99,
      currency: 'EUR',
      billingCycle: 'monthly',
      autoRenew: true,
      features: [
        '4K Ultra HD',
        '√âcrans multiples (jusqu\'√† 4)',
        'T√©l√©chargements illimit√©s',
        'Contenu exclusif',
        'Pas de publicit√©s',
        'Support prioritaire'
      ],
      metadata: {
        planName: 'Premium Plus',
        maxProfiles: 5,
        maxQuality: '4K',
        offlineViewing: true
      },
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    // Ins√©rer la subscription
    const result = await subscriptionsCollection.insertOne(subscription);
    
    if (result.acknowledged) {
      console.log('‚úÖ Subscription premium cr√©√©e avec succ√®s !');
      console.log('   ID:', result.insertedId);
      console.log('   Type:', subscription.type);
      console.log('   Status:', subscription.status);
      console.log('   Expire le:', subscription.endDate.toLocaleDateString());
      
      console.log('\nüìã Instructions:');
      console.log('1. D√©connectez-vous de l\'application');
      console.log('2. Reconnectez-vous avec test2@gmail.com');
      console.log('3. Testez une vid√©o - elle devrait fonctionner !');
      
    } else {
      console.log('‚ùå Erreur lors de la cr√©ation de la subscription');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur :', error);
  } finally {
    await client.close();
    console.log('\nüîå Connexion MongoDB ferm√©e');
  }
}

// Ex√©cuter le script
createSubscription().catch(console.error);
