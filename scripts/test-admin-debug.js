// scripts/test-admin-debug.js
// Script pour d√©boguer l'authentification admin

console.log('üîç Debug de l\'authentification admin');
console.log('===================================');

// Test 1: V√©rifier que les fichiers existent
console.log('\n1. V√©rification des fichiers...');
const fs = require('fs');
const path = require('path');

const files = [
  'hooks/useProtectedRoute.ts',
  'contexts/AuthContext.tsx',
  'lib/withAdminAuth.ts',
  'lib/auth.ts',
  'app/admin/movies/manage/page.tsx'
];

files.forEach(file => {
  const fullPath = path.join(process.cwd(), file);
  if (fs.existsSync(fullPath)) {
    console.log(`‚úÖ ${file} existe`);
  } else {
    console.log(`‚ùå ${file} manquant`);
  }
});

// Test 2: V√©rifier la structure des dossiers
console.log('\n2. V√©rification de la structure...');
const directories = [
  'hooks',
  'contexts',
  'lib',
  'app/admin/movies/manage'
];

directories.forEach(dir => {
  const fullPath = path.join(process.cwd(), dir);
  if (fs.existsSync(fullPath)) {
    console.log(`‚úÖ ${dir} existe`);
  } else {
    console.log(`‚ùå ${dir} manquant`);
  }
});

// Test 3: V√©rifier les imports
console.log('\n3. V√©rification des imports...');
const managePage = path.join(process.cwd(), 'app/admin/movies/manage/page.tsx');
if (fs.existsSync(managePage)) {
  const content = fs.readFileSync(managePage, 'utf8');
  
  if (content.includes('useProtectedRoute')) {
    console.log('‚úÖ useProtectedRoute import√©');
  } else {
    console.log('‚ùå useProtectedRoute non import√©');
  }
  
  if (content.includes('requireAdmin')) {
    console.log('‚úÖ requireAdmin utilis√©');
  } else {
    console.log('‚ùå requireAdmin non utilis√©');
  }
  
  if (content.includes('isLoading')) {
    console.log('‚úÖ isLoading g√©r√©');
  } else {
    console.log('‚ùå isLoading non g√©r√©');
  }
}

// Test 4: V√©rifier les logs de debug
console.log('\n4. V√©rification des logs de debug...');
const hookFile = path.join(process.cwd(), 'hooks/useProtectedRoute.ts');
if (fs.existsSync(hookFile)) {
  const content = fs.readFileSync(hookFile, 'utf8');
  
  if (content.includes('console.log')) {
    console.log('‚úÖ Logs de debug pr√©sents dans useProtectedRoute');
  } else {
    console.log('‚ùå Logs de debug manquants dans useProtectedRoute');
  }
}

const contextFile = path.join(process.cwd(), 'contexts/AuthContext.tsx');
if (fs.existsSync(contextFile)) {
  const content = fs.readFileSync(contextFile, 'utf8');
  
  if (content.includes('console.log')) {
    console.log('‚úÖ Logs de debug pr√©sents dans AuthContext');
  } else {
    console.log('‚ùå Logs de debug manquants dans AuthContext');
  }
}

console.log('\nüéØ R√©sum√© du debug:');
console.log('- Fichiers: V√©rifi√©s');
console.log('- Structure: V√©rifi√©e');
console.log('- Imports: V√©rifi√©s');
console.log('- Logs: Ajout√©s pour le debug');

console.log('\nüìã Instructions pour d√©boguer:');
console.log('1. Ouvrir la console du navigateur');
console.log('2. Aller sur /admin/movies/manage');
console.log('3. V√©rifier les logs dans la console:');
console.log('   - AuthContext - performAuthCheck');
console.log('   - useProtectedRoute - V√©rification');
console.log('   - withAdminAuth - Token d√©cod√©');
console.log('4. V√©rifier le token dans localStorage');
console.log('5. V√©rifier le r√¥le de l\'utilisateur');

console.log('\nüîç Points √† v√©rifier:');
console.log('- Token pr√©sent dans localStorage');
console.log('- Utilisateur pr√©sent dans localStorage');
console.log('- R√¥le de l\'utilisateur = "admin"');
console.log('- Token valide et non expir√©');
console.log('- Redirection correcte en cas d\'erreur');

console.log('\n‚úÖ Debug de l\'authentification admin termin√©!');
