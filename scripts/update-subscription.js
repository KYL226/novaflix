const { MongoClient } = require('mongodb');
require('dotenv').config({ path: '.env.local' });

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/novaflix';

async function updateUserSubscription() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    console.log('‚úÖ Connect√© √† MongoDB');
    
    const db = client.db('novaflix');
    const usersCollection = db.collection('users');
    
    // Mettre √† jour l'utilisateur test@gmail.com
    const result = await usersCollection.updateOne(
      { email: 'test@gmail.com' },
      { 
        $set: { 
          subscription: 'premium',
          updatedAt: new Date()
        } 
      }
    );
    
    if (result.matchedCount > 0) {
      console.log('‚úÖ Utilisateur mis √† jour avec succ√®s');
      
      // R√©cup√©rer l'utilisateur mis √† jour
      const updatedUser = await usersCollection.findOne({ email: 'test@gmail.com' });
      console.log('Utilisateur mis √† jour:', {
        email: updatedUser.email,
        role: updatedUser.role,
        subscription: updatedUser.subscription
      });
      
      console.log('\nüìã Instructions:');
      console.log('1. D√©connectez-vous de l\'application');
      console.log('2. Reconnectez-vous avec test@gmail.com');
      console.log('3. Un nouveau token sera g√©n√©r√© avec subscription: premium');
      
    } else {
      console.log('‚ùå Utilisateur test@gmail.com non trouv√©');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur :', error);
  } finally {
    await client.close();
    console.log('\nüîå Connexion MongoDB ferm√©e');
  }
}

// Ex√©cuter le script
updateUserSubscription().catch(console.error);
